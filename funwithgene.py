# -*- coding: utf-8 -*-
"""FunWithGene.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16NX3eraA6czWoHC39LMv6XG2AgYtdZ9R
"""

import pandas as pd
df=pd.read_csv("EthTrimmed.csv")
print(df['Allele1'][0])

pd.options.display.max_columns=None
pd.set_option("max_colwidth",10)
N=397
df=df.drop(columns=['ParentM','ParentF','EthA','EthE','EthK','EthP'])
print(df)

sampleAllele=df['Allele1'][0]
sampleAllele2=df['Allele2'][0]
print(sampleAllele.count("A"))
print(sampleAllele.count("C"))
print(sampleAllele.count("G"))
print(sampleAllele.count("T"))

"""Chargaff Nice"""

freqs=[]
for char1 in ['A','G','C','T']:
  for char2 in ['A','G','C','T']:
    #print((char1+char2)+": "+str(sampleAllele.count(char1+char2)))
    freqs.append(((char1+char2),sampleAllele.count(char1+char2)))
sortedFreq=sorted(freqs,key=lambda x:x[1])
for term in sortedFreq:
  print(term[0]+": "+str(term[1]))

"""Looks like some kind of pattern in digrams too. AA,GG,TT,CC i.e like-like combos are infrequent as compared to unlike combinations like GC"""

print(len(sampleAllele))
#print(len(sampleAllele2))
differingIn=0
for i in range(len(sampleAllele2)):
  if sampleAllele[i]!=sampleAllele2[i]:
    differingIn+=1
print(differingIn/len(sampleAllele)) #34.76 percent difference in both alleles.

countMap={}
for i in range(N):
      firstAllele=df['Allele1'][i]
      secondAllele=df['Allele2'][i]
      combo=firstAllele[30]+secondAllele[30]
      if combo in countMap.keys():
        countMap[combo]+=1
      else:
        countMap[combo]=1
for combo in countMap.keys():
  print(combo+": "+str(countMap[combo]))

"""IDK! GA and AG are SNPs probably? vary the number 30 to check for other SNPs?



"""

def majorAllele(pos):
  countMap={}
  for i in range(N):
      firstAllele=df['Allele1'][i]
      secondAllele=df['Allele2'][i]
      combo=firstAllele[pos]+secondAllele[pos]
      if combo in countMap.keys():
        countMap[combo]+=1
      else:
        countMap[combo]=1
  major="XX"
  cnt=0
  for combo in countMap.keys():
    if countMap[combo]>cnt:
      major=combo
      cnt=countMap[combo]
  return major
print(majorAllele(52))

majorMap=[]
for i in range(len(df['Allele1'][0])):
  majorMap.append(majorAllele(i))

SNPar=[]
for i in range(len(df['Allele1'][0])):
  firstAllele=df['Allele1'][0]
  secondAllele=df['Allele2'][0]
  combo=firstAllele[i]+secondAllele[i]
  major=majorMap[i]
  snpVal=0
  if major[0]==combo[0]:
    snpVal+=1
  if major[1]==combo[1]:
    snpVal+=1
  SNPar.append(snpVal)
print(SNPar)
print(SNPar.count(2))
print(SNPar.count(1))
print(SNPar.count(0))

"""As expected a lot of 2's some 1's and very few 0's.This roughly means that for a lot of positions the common allels are found, for some there is one common and one less common and for very few we have both less commmon allels."""

import numpy as np
SnPmatrix=[]
for i in range(N):
  SNPar=[]
  for pos in range(len(df['Allele1'][0])):
    firstAllele=df['Allele1'][i]
    secondAllele=df['Allele2'][i]
    combo=firstAllele[pos]+secondAllele[pos]
    major=majorMap[pos]
    snpVal=0
    if major[0]==combo[0]:
      snpVal+=1
    if major[1]==combo[1]:
      snpVal+=1
    SNPar.append(snpVal)
  SnPmatrix.append(SNPar)
SnPmatrix=np.array(SnPmatrix)
SnPmatrix=SnPmatrix.transpose()
print(SnPmatrix)

print(SnPmatrix.shape)

SnPmatrix=SnPmatrix.transpose()

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
pca_Val=PCA(n_components=2).fit(SnPmatrix).transform(SnPmatrix)
plt.scatter(pca_Val[:,0],pca_Val[:,1])
plt.show()
